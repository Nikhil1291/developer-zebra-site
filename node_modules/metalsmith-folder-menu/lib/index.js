
var basename = require('path').basename;
var dirname = require('path').dirname;
var extname = require('path').extname;

/**
 * Expose `plugin`.
 */

module.exports = plugin;

/**
 */

function plugin(options){
  options = options || {};
  var keys = options.keys || [];
  
  return function(files, metalsmith, done){
    setImmediate(done);
    console.log('****** Pattern: %s',options.pattern);
    var menu = [];
    
    //build menu
    Object.keys(files).forEach(function(file){
      if (!markdown(file)) return;      //ignore anything but md files
      console.log('********checking file: %s', file);
      var data = files[file];
      var dir = dirname(file);
      var file = files[file];
      if (!inpattern(file,options.pattern)) return;      //ignore files not in parent
      // console.log('base: %s', file.path.base)
      // console.log('dir: %s', file.path.dir)
      // console.log('ext: %s', file.path.ext)
      // console.log('name: %s', file.path.name)
      // console.log('href: %s', file.path.href)
      var noPattern = file.path.dir.replace(options.pattern,"").trim();
      var folders = noPattern.split('/')
      console.log(folders);
      var numlevels = folders.length;

      var itemL1Key = options.pattern+folders[0];
      var itemL1 = getfilemenu(itemL1Key,files);
      var addedL1 = menu.filter(function ( obj ) {
          return obj.dir === itemL1Key;
      })[0];
      if(!addedL1){
        itemL1.items = [];
        menu.push(itemL1);
      }
      if(numlevels>1){
        var itemL2Key = options.pattern+folders[0]+"/"+folders[1]
        var itemL2 = getfilemenu(itemL2Key,files);

        for (var i = 0; i < menu.length; i++) {
          if(menu[i].dir ===itemL1Key){
            var addedL2 = menu[i].items.filter(function ( obj ) {
                return obj.dir === itemL2Key;
            })[0];
            // console.log('---itemL2: %s',JSON.stringify(itemL2))
            if(!addedL2){
              menu[i].items.push(itemL2);
            }

          }
        };

      }      

      
      // console.log('noPattern [%s]: %s', numlevels, l2Dir);

    });

    Object.keys(files).forEach(function(file){
      if (!markdown(file)) return;      //ignore anything but md files
      if (!inpattern(files[file],options.pattern)) return;      //ignore files not in parent
      console.log("****adding menu %s", files[file].path.dir);
      files[file].menu = menu;
    });
    files[options.pattern+'index.md'].menu = menu;

    console.log("****** menu");
    console.log(menu);
    console.log(menu[0].items);

  };
}

/**
 * Check if a `file` is markdown.
 *
 * @param {String} file
 * @return {Boolean}
 */

function markdown(file){
  return /\.md|\.markdown/.test(extname(file));
}

/**
 * Check if a file matches the pattern
 * we only want to add menu to files in that Pattern
 */
function inpattern(file,pattern){
  console.log("comparing %s - %s", file.path.dir,pattern)
  return file.path.dir.startsWith(pattern);

}

function getfilemenu(folder,files){

  var filename = folder + "/index.md";
  // console.log('filename: %',filename);
  //console.log('files: %',files[filename]);
  var title = files[filename].title
  var item = {
    title : files[filename].title,
    url : files[filename].path.href,
    dir: files[filename].path.dir
  };

  // console.log('***item: %s, %s',item.title,item.url);
  return item;
}
